
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


from seleniumdriver import SeleniumDriver
import logging
import os


class Exploit:

    attributes = {}
    logger = logging.getLogger("Exploit")

    def __init__(self, visible=False):
        self.driver = None
        self.display = None
        self.visible = visible
        return

    def create_selenium_driver(self, javascript=True, user_agent=None):
        self.driver = SeleniumDriver(self.visible,
                                     javascript=javascript,
                                     user_agent=user_agent)
        return self.driver

    def setup(self, sys_dir):
        """Optional method to be executed upon starting the application. Actions taken by this method will be excluded from any data collection process."""
        return

    def exploit(self):
        raise NotImplementedError("An exploit must have an exploit() method.")

    def verify(self):
        """Define a procedure to verify that a target application has been exploited."""
        raise NotImplementedError("An exploit must have a test() method.")

    def write_tmpfile(self, msg):
        """Writes msg to a temporary file located in .tmpbuff with filename equal to the exploit 'name' attribute. This is used as a form of IPC when messages need to be passed between instances of the exploit class. For example, when one performs actions within an exploit's setup method that generates information needed by the exploit method (like a session ID). Since setup is often called from a different invocation a persistent buffer is needed for passing any messages."""
        os.mkdir('.tmpbuff')
        filename = '.tmpbuff/' + self.attributes['Name']
        fd = open(filename, 'w')
        fd.write(msg)
        fd.close()
        return

    def read_tmpfile(self):
        filename = '.tmpbuff/' + self.attributes['Name']
        fd = open(filename, 'r')
        buff = fd.read()
        fd.close()
        return buff
