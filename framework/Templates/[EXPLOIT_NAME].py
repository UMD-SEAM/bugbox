
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import selenium.common.exceptions
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "[EXPLOIT_NAME]",
                  'Description' : "Write description here",
                  'References' :  [['URI of relevant entries in databases']], 
                  'Target' :      "[TARGET_NAME]",
                  'TargetLicense' : '',
                  'Plugin' : "[PLUGIN_NAME]",
                  #VULN_TYPE represents the type of vulnerability exploited.
                  #eg. 'SQL'
                  'Type' : '[VULN_TYPE]',
                  #Indicated whether or not the exploit needs to authenticate 
                  #with the target to function correctly
                  'Privileged' : [BOOLEAN]
                  }

    def __init__(self, visible=False):
        """Initialize exploit variable"""
        framework.Exploit.__init__(self, visible)
        return
            
    def setup(self):
        """Perform any exploit specific setup"""
        driver.self.create_selenium_driver()
        driver.cleanup()
        
    def exploit(self):
        """Perform the exploit"""
        driver = self.create_selenium_driver()
        self.verified = True
        if self.visible:
            time.sleep(10)
        driver.cleanup()
        return
    #The verify method should verify that the exploit method successfully 
    #exploited the vulnerability. This should be done separately of the 
    #exploit method when reasonable. Return True if successful.
    def verify(self):
        """Verify that the exploit was completed successfully.  Should be done with it's own instance of the webdriver when possible. Return True if successful"""
        return self.verified
